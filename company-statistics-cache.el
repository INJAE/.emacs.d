(setq company-statistics--scores #s(hash-table size 400 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("code" (((:file "/home/nieel/.emacs.d/config.org") . 1) (org-mode . 1) (nil . 1)) "combine-and-quote-strings" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "evil-leader/set-key" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 7) ((:keyword "use-package") . 6) (emacs-lisp-mode . 7) (nil . 7) ((:keyword "setq") . 1)) "gh-md-render-buffer" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "yasnippet" (((:file "/home/nieel/.emacs.d/config.org") . 1) (org-mode . 1) (nil . 1)) "global-set-key" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "use-package" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 4) (emacs-lisp-mode . 4) (nil . 4) ((:keyword "use-package") . 1)) "paradox-list-packages" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "paradox-require" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "add-to-list" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "<vi" (((:file "/home/nieel/.emacs.d/config.org") . 2) (org-mode . 2) (nil . 2)) "title" (((:file "/home/nieel/.emacs.d/config.org") . 1) (org-mode . 1) (nil . 1)) "<" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "when") . 1) (emacs-lisp-mode . 1) (nil . 1)) "aref" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "when") . 1) (emacs-lisp-mode . 1) (nil . 1)) "company-yasnippet" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "bmp" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "up" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "kannada-composable-pattern" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "git pull origin master" ((eshell-mode . 4) (nil . 4)) "sudo cppm build -c install" ((eshell-mode . 19) (nil . 19)) "minimum" (((:file "/home/nieel/dev/cppm/.git/COMMIT_EDITMSG") . 1) (text-mode . 2) (nil . 2) ((:file "/home/nieel/dev/nlpo/.git/COMMIT_EDITMSG") . 1)) "sudo chown -R nieel.nieel ." ((eshell-mode . 10) (nil . 10)) "dependencies" (((:file "/home/nieel/dev/cppm/docs/docs/installation.md") . 1) (markdown-mode . 2) (nil . 2) ((:file "/home/nieel/dev/cppm/docs/docs/index.md") . 1)) "mkdocs serve" ((eshell-mode . 3) (nil . 3)) "git rebase master" ((eshell-mode . 1) (nil . 1)) "sudo chown -R nieel.nieel ~/.cppm/" ((eshell-mode . 1) (nil . 1)) "sudo chown -R nieel.nieel ~/.hunter/" ((eshell-mode . 1) (nil . 1)) "sudo chown -R nieel.nieel ~/.hunter/*" ((eshell-mode . 1) (nil . 1)) "sudo make -j8 install" ((eshell-mode . 5) (nil . 5)) "sudo chown -R nieel.nieel build/" ((eshell-mode . 1) (nil . 1)) "sudo cppm build -c" ((eshell-mode . 1) (nil . 1)) "cppm cppkg search" ((eshell-mode . 1) (nil . 1)) "newline" (((:file "/home/nieel/.emacs.d/config.org") . 5) (org-mode . 5) (nil . 5)) "uml" (((:file "/home/nieel/.emacs.d/config.org") . 1) (org-mode . 1) (nil . 1)) "user" (((:file "/home/nieel/.emacs.d/config.org") . 1) (org-mode . 1) (nil . 1)) "package" (((:file "/home/nieel/.emacs.d/config.org") . 2) (org-mode . 2) (nil . 2)) "update" (((:file "/home/nieel/.emacs.d/config.org") . 1) (org-mode . 1) (nil . 1)) "paint" (((:file "/home/nieel/.emacs.d/config.org") . 1) (org-mode . 1) (nil . 1)) "use-dialog-box" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) (emacs-lisp-mode . 1) (nil . 1)) "update-leim-list-functions" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) (emacs-lisp-mode . 1) (nil . 1)) "window-system" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "exwm-input-set-key" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2) ((:keyword "setq") . 2) (emacs-lisp-mode . 2) (nil . 2)) "windmove-right" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "split-window-right" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "split-window-vertically" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "server-start" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) (emacs-lisp-mode . 1) (nil . 1)) "exwm-exit" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "semicolon" (((:file "/home/nieel/.i3/config") . 1) (conf-space-mode . 1) (nil . 1)) "~/Pictures/" (((:file "/home/nieel/.i3/config") . 1) (conf-space-mode . 1) (nil . 1)) "~/Pictures/wallpaper.jpg" (((:file "/home/nieel/.i3/config") . 1) (conf-space-mode . 1) (nil . 1)) "sudo chown -R nieel:nieel ." ((eshell-mode . 3) (nil . 3)) "sudo cppm build --ntc install" ((eshell-mode . 3) (nil . 3)) "eshell-buffer-maximum-lines" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "cppm cppkg push nlohmann_json/lastest/" ((eshell-mode . 5) (nil . 5)) "sudo rm -r thirdparty/nlohmann_json/" ((eshell-mode . 1) (nil . 1)) "enable_language" (((:file "/home/nieel/dev/test/cppkg_test/cmake/cppm_tool.cmake") . 2) ((:keyword "endif") . 1) (cmake-mode . 2) (nil . 2) ((:keyword "macro") . 1)) "cd test/cppkg_test/nigthly_repo/" ((eshell-mode . 1) (nil . 1)) "CMAKE_CXX_COMPILER" (((:file "/home/nieel/dev/test/cppkg_test/thirdparty/FunctionalPlus/lastest/FunctionalPlus.cmake.in") . 1) (cmake-mode . 1) (nil . 1)) "cppm cppkg push FunctionalPlus/lastest/" ((eshell-mode . 1) (nil . 1)) "sudo rm -rf thirdparty/*" ((eshell-mode . 1) (nil . 1)) "using" (((:file "/home/nieel/dev/cppm/src/option/init.cpp") . 1) (c++-mode . 1) (nil . 1)) "evil-want-keybinding" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "sudo chown -R nieel.nieel ~/.ccache/" ((eshell-mode . 1) (nil . 1)) "sudo chown -R nieel.nieel ~/.cppm" ((eshell-mode . 2) (nil . 2)) "CMakePushCheckState" (((:file "/home/nieel/dev/cppm/cmake/Modules/FindFilesystem.cmake") . 1) (cmake-mode . 1) (nil . 1)) "CheckIncludeFileCXX" (((:file "/home/nieel/dev/cppm/cmake/Modules/FindFilesystem.cmake") . 1) (cmake-mode . 1) (nil . 1)) "CheckCXXSourceCompiles" (((:file "/home/nieel/dev/cppm/cmake/Modules/FindFilesystem.cmake") . 1) (cmake-mode . 1) (nil . 1)) "generate" (((:file "/home/nieel/dev/cppm/.git/COMMIT_EDITMSG") . 1) (text-mode . 1) (nil . 1)) "endfunction" (((:file "/home/nieel/dev/cppm/cmake/cppm_tool.cmake") . 1) ((:keyword "function") . 1) (cmake-mode . 1) (nil . 1)) "~/Dropbox/" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2) ((:keyword "setq") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "function") . 1)) "~/Dropbox/org/" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2) ((:keyword "setq") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "let") . 1)) "org-agenda-mode-hook" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "lambda" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2) ((:keyword "setq") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "lambda") . 1)) "interactive" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "defun") . 1) (emacs-lisp-mode . 1) (nil . 1)) "~/Dropbox/org/gcal.org" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "let") . 1) (emacs-lisp-mode . 1) (nil . 1)) "setq-local" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "if") . 1) (emacs-lisp-mode . 1) (nil . 1)) "set" (((:file "/home/nieel/.emacs.d/config.org") . 1) (org-mode . 1) (nil . 1)) "password-cache" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "password-cache-expiry" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "helm-system-packages" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)))) company-statistics--log [nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ("code" (nil . 1) (org-mode . 1) ((:file "/home/nieel/.emacs.d/config.org") . 1)) ("combine-and-quote-strings" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-leader/set-key" (nil . 3) (emacs-lisp-mode . 3) ((:keyword "use-package") . 3) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 3)) ("gh-md-render-buffer" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-leader/set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("yasnippet" (nil . 1) (org-mode . 1) ((:file "/home/nieel/.emacs.d/config.org") . 1)) ("evil-leader/set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("global-set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("use-package" (nil . 1) (emacs-lisp-mode . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("use-package" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("paradox-list-packages" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("paradox-require" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("use-package" (nil . 1) (emacs-lisp-mode . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("add-to-list" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("<vi" (nil . 2) (org-mode . 2) ((:file "/home/nieel/.emacs.d/config.org") . 2)) ("title" (nil . 1) (org-mode . 1) ((:file "/home/nieel/.emacs.d/config.org") . 1)) ("<" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "when") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("aref" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "when") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("<vi" (nil . 1) (org-mode . 1) ((:file "/home/nieel/.emacs.d/config.org") . 1)) ("evil-leader/set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("company-yasnippet" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("bmp" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("up" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("kannada-composable-pattern" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("git pull origin master" (nil . 3) (eshell-mode . 3)) ("git pull origin master" (nil . 1) (eshell-mode . 1)) ("git pull origin master" (nil . 1) (eshell-mode . 1)) ("sudo cppm build -c install" (nil . 14) (eshell-mode . 14)) ("sudo cppm build -c install" (nil . 1) (eshell-mode . 1)) ("sudo cppm build -c install" (nil . 1) (eshell-mode . 1)) ("sudo cppm build -c install" (nil . 1) (eshell-mode . 1)) ("sudo cppm build -c install" (nil . 1) (eshell-mode . 1)) ("sudo cppm build -c install" (nil . 1) (eshell-mode . 1)) ("sudo cppm build -c install" (nil . 1) (eshell-mode . 1)) ("sudo cppm build -c install" (nil . 1) (eshell-mode . 1)) ("minimum" (nil . 2) (text-mode . 2) ((:file "/home/nieel/dev/cppm/.git/COMMIT_EDITMSG") . 1)) ("sudo cppm build -c install" (nil . 1) (eshell-mode . 1)) ("sudo cppm build -c install" (nil . 1) (eshell-mode . 1)) ("sudo cppm build -c install" (nil . 1) (eshell-mode . 1)) ("sudo cppm build -c install" (nil . 1) (eshell-mode . 1)) ("sudo cppm build -c install" (nil . 1) (eshell-mode . 1)) ("sudo cppm build -c install" (nil . 1) (eshell-mode . 1)) ("minimum" (nil . 1) (text-mode . 1) ((:file "/home/nieel/dev/nlpo/.git/COMMIT_EDITMSG") . 1)) ("sudo chown -R nieel.nieel ." (nil . 1) (eshell-mode . 1)) ("sudo cppm build -c install" (nil . 1) (eshell-mode . 1)) ("sudo chown -R nieel.nieel ." (nil . 1) (eshell-mode . 1)) ("dependencies" (nil . 2) (markdown-mode . 2) ((:file "/home/nieel/dev/cppm/docs/docs/installation.md") . 1)) ("dependencies" (nil . 1) (markdown-mode . 1) ((:file "/home/nieel/dev/cppm/docs/docs/index.md") . 1)) ("mkdocs serve" (nil . 3) (eshell-mode . 3)) ("mkdocs serve" (nil . 1) (eshell-mode . 1)) ("mkdocs serve" (nil . 1) (eshell-mode . 1)) ("git rebase master" (nil . 1) (eshell-mode . 1)) ("git pull origin master" (nil . 1) (eshell-mode . 1)) ("sudo chown -R nieel.nieel ." (nil . 1) (eshell-mode . 1)) ("sudo chown -R nieel.nieel ." (nil . 1) (eshell-mode . 1)) ("sudo chown -R nieel.nieel ~/.cppm/" (nil . 1) (eshell-mode . 1)) ("sudo chown -R nieel.nieel ~/.hunter/" (nil . 1) (eshell-mode . 1)) ("sudo chown -R nieel.nieel ~/.hunter/*" (nil . 1) (eshell-mode . 1)) ("sudo make -j8 install" (nil . 1) (eshell-mode . 1)) ("sudo cppm build -c install" (nil . 1) (eshell-mode . 1)) ("sudo chown -R nieel.nieel build/" (nil . 1) (eshell-mode . 1)) ("sudo make -j8 install" (nil . 1) (eshell-mode . 1)) ("sudo make -j8 install" (nil . 1) (eshell-mode . 1)) ("sudo make -j8 install" (nil . 1) (eshell-mode . 1)) ("sudo chown -R nieel.nieel ." (nil . 1) (eshell-mode . 1)) ("sudo make -j8 install" (nil . 1) (eshell-mode . 1)) ("sudo chown -R nieel.nieel ." (nil . 1) (eshell-mode . 1)) ("sudo cppm build -c" (nil . 1) (eshell-mode . 1)) ("sudo chown -R nieel.nieel ." (nil . 1) (eshell-mode . 1)) ("sudo cppm build -c install" (nil . 1) (eshell-mode . 1)) ("cppm cppkg search" (nil . 1) (eshell-mode . 1)) ("sudo cppm build -c install" (nil . 1) (eshell-mode . 1)) ("newline" (nil . 4) (org-mode . 4) ((:file "/home/nieel/.emacs.d/config.org") . 4)) ("uml" (nil . 1) (org-mode . 1) ((:file "/home/nieel/.emacs.d/config.org") . 1)) ("newline" (nil . 1) (org-mode . 1) ((:file "/home/nieel/.emacs.d/config.org") . 1)) ("newline" (nil . 1) (org-mode . 1) ((:file "/home/nieel/.emacs.d/config.org") . 1)) ("newline" (nil . 1) (org-mode . 1) ((:file "/home/nieel/.emacs.d/config.org") . 1)) ("user" (nil . 1) (org-mode . 1) ((:file "/home/nieel/.emacs.d/config.org") . 1)) ("package" (nil . 1) (org-mode . 1) ((:file "/home/nieel/.emacs.d/config.org") . 1)) ("update" (nil . 1) (org-mode . 1) ((:file "/home/nieel/.emacs.d/config.org") . 1)) ("paint" (nil . 1) (org-mode . 1) ((:file "/home/nieel/.emacs.d/config.org") . 1)) ("use-dialog-box" (nil . 1) (emacs-lisp-mode . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("update-leim-list-functions" (nil . 1) (emacs-lisp-mode . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-leader/set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("window-system" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("exwm-input-set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("windmove-right" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("exwm-input-set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("split-window-right" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("split-window-vertically" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("newline" (nil . 1) (org-mode . 1) ((:file "/home/nieel/.emacs.d/config.org") . 1)) ("server-start" (nil . 1) (emacs-lisp-mode . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("exwm-exit" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("semicolon" (nil . 1) (conf-space-mode . 1) ((:file "/home/nieel/.i3/config") . 1)) ("~/Pictures/" (nil . 1) (conf-space-mode . 1) ((:file "/home/nieel/.i3/config") . 1)) ("~/Pictures/wallpaper.jpg" (nil . 1) (conf-space-mode . 1) ((:file "/home/nieel/.i3/config") . 1)) ("sudo cppm build -c install" (nil . 1) (eshell-mode . 1)) ("sudo chown -R nieel:nieel ." (nil . 3) (eshell-mode . 3)) ("sudo cppm build --ntc install" (nil . 1) (eshell-mode . 1)) ("sudo chown -R nieel:nieel ." (nil . 1) (eshell-mode . 1)) ("sudo chown -R nieel:nieel ." (nil . 1) (eshell-mode . 1)) ("use-package" (nil . 1) (emacs-lisp-mode . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("eshell-buffer-maximum-lines" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("cppm cppkg push nlohmann_json/lastest/" (nil . 5) (eshell-mode . 5)) ("cppm cppkg push nlohmann_json/lastest/" (nil . 1) (eshell-mode . 1)) ("sudo rm -r thirdparty/nlohmann_json/" (nil . 1) (eshell-mode . 1)) ("enable_language" (nil . 2) (cmake-mode . 2) ((:keyword "endif") . 1) ((:file "/home/nieel/dev/test/cppkg_test/cmake/cppm_tool.cmake") . 2)) ("enable_language" (nil . 1) (cmake-mode . 1) ((:keyword "macro") . 1) ((:file "/home/nieel/dev/test/cppkg_test/cmake/cppm_tool.cmake") . 1)) ("sudo cppm build --ntc install" (nil . 1) (eshell-mode . 1)) ("sudo cppm build --ntc install" (nil . 1) (eshell-mode . 1)) ("cd test/cppkg_test/nigthly_repo/" (nil . 1) (eshell-mode . 1)) ("CMAKE_CXX_COMPILER" (nil . 1) (cmake-mode . 1) ((:file "/home/nieel/dev/test/cppkg_test/thirdparty/FunctionalPlus/lastest/FunctionalPlus.cmake.in") . 1)) ("cppm cppkg push nlohmann_json/lastest/" (nil . 1) (eshell-mode . 1)) ("cppm cppkg push FunctionalPlus/lastest/" (nil . 1) (eshell-mode . 1)) ("cppm cppkg push nlohmann_json/lastest/" (nil . 1) (eshell-mode . 1)) ("cppm cppkg push nlohmann_json/lastest/" (nil . 1) (eshell-mode . 1)) ("sudo rm -rf thirdparty/*" (nil . 1) (eshell-mode . 1)) ("using" (nil . 1) (c++-mode . 1) ((:file "/home/nieel/dev/cppm/src/option/init.cpp") . 1)) ("evil-leader/set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-want-keybinding" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("sudo chown -R nieel.nieel ~/.ccache/" (nil . 1) (eshell-mode . 1)) ("sudo chown -R nieel.nieel ." (nil . 1) (eshell-mode . 1)) ("sudo chown -R nieel.nieel ." (nil . 1) (eshell-mode . 1)) ("sudo chown -R nieel.nieel ~/.cppm" (nil . 2) (eshell-mode . 2)) ("CMakePushCheckState" (nil . 1) (cmake-mode . 1) ((:file "/home/nieel/dev/cppm/cmake/Modules/FindFilesystem.cmake") . 1)) ("CheckIncludeFileCXX" (nil . 1) (cmake-mode . 1) ((:file "/home/nieel/dev/cppm/cmake/Modules/FindFilesystem.cmake") . 1)) ("CheckCXXSourceCompiles" (nil . 1) (cmake-mode . 1) ((:file "/home/nieel/dev/cppm/cmake/Modules/FindFilesystem.cmake") . 1)) ("sudo chown -R nieel.nieel ~/.cppm" (nil . 1) (eshell-mode . 1)) ("sudo chown -R nieel.nieel ." (nil . 1) (eshell-mode . 1)) ("generate" (nil . 1) (text-mode . 1) ((:file "/home/nieel/dev/cppm/.git/COMMIT_EDITMSG") . 1)) ("endfunction" (nil . 1) (cmake-mode . 1) ((:keyword "function") . 1) ((:file "/home/nieel/dev/cppm/cmake/cppm_tool.cmake") . 1)) ("~/Dropbox/" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2)) ("~/Dropbox/org/" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("org-agenda-mode-hook" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("lambda" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2)) ("lambda" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("~/Dropbox/" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "function") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("interactive" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("~/Dropbox/org/" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "let") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("~/Dropbox/org/gcal.org" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "let") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("setq-local" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("package" (nil . 1) (org-mode . 1) ((:file "/home/nieel/.emacs.d/config.org") . 1)) ("set" (nil . 1) (org-mode . 1) ((:file "/home/nieel/.emacs.d/config.org") . 1)) ("password-cache" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("password-cache-expiry" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-leader/set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("helm-system-packages" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1))] company-statistics--index 0)