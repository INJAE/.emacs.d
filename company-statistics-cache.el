(setq company-statistics--scores #s(hash-table size 400 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("evil-leader/set-key" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 13) ((:keyword "use-package") . 7) (emacs-lisp-mode . 13) (nil . 13) ((:keyword "setq") . 4) ((:keyword "interactive") . 1) ((:keyword "setq-default") . 1)) "use-package" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 7) (emacs-lisp-mode . 7) (nil . 7) ((:keyword "use-package") . 3) ((:keyword "setq") . 4)) "add-to-list" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 3) ((:keyword "use-package") . 2) (emacs-lisp-mode . 3) (nil . 3) ((:keyword "setq") . 1)) "<vi" (((:file "/home/nieel/.emacs.d/config.org") . 1) (org-mode . 1) (nil . 1)) "url-package-name" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 3) ((:keyword "use-package") . 1) (emacs-lisp-mode . 3) (nil . 3) ((:keyword "setq") . 2)) "upkg" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 10) ((:keyword "setq") . 7) (emacs-lisp-mode . 10) (nil . 10) ((:keyword "use-package") . 3)) "width" (((:file "/home/nieel/dev/school/cpp/src/main.cpp") . 1) (c++-mode . 1) (nil . 1)) "minimum" ((text-mode . 1) (nil . 1)) "sudo chown -R nieel.nieel ." ((eshell-mode . 3) (nil . 3)) "dependencies" ((nil . 9) ((:file "/home/nieel/dev/cppm/cppm.toml") . 2) (toml-mode . 2) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 7) ((:keyword "auto") . 1) (c++-mode . 7) ((:symbol "config") . 4) ((:keyword "if") . 5) ((:keyword "for") . 1) ((:file "/home/nieel/dev/cppm/.git/COMMIT_EDITMSG") . 1) (text-mode . 1) (markdown-mode . 1)) "height" (((:file "/home/nieel/dev/school/cpp/src/main.cpp") . 1) (c++-mode . 1) (nil . 1)) "sudo chown -R nieel.nieel ~/.cppm/" ((eshell-mode . 1) (nil . 1)) "sudo chown -R nieel.nieel ~/.hunter/" ((eshell-mode . 2) (nil . 2)) "greater" (((:file "/home/nieel/dev/school/cpp/src/main.cpp") . 1) ((:symbol "std") . 1) ((:keyword "auto") . 1) (c++-mode . 1) (nil . 1)) "~/.vscode/extensions/webfreak.debug-0.22.0/" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "package" (((:file "/home/nieel/.emacs.d/config.org") . 2) (org-mode . 2) (nil . 3) ((:file "/home/nieel/dev/go_study/main.go") . 1) (go-mode . 1)) "~/.vscode/extensions/webfreak.debug-0.22.0/out/" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "~/.vscode/extensions/webfreak.debug-0.22.0/out/src/" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "~/.vscode/extensions/webfreak.debug-0.22.0/out/src/gdb.js" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "window-system" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2) ((:keyword "use-package") . 2) (emacs-lisp-mode . 2) (nil . 2)) "Docker" (((:file "/home/nieel/dev/alchemist/src/main.rs") . 2) ((:symbol "shiplift") . 2) ((:keyword "let") . 2) (rust-mode . 2) (nil . 2)) "doom-modeline-env-ruby-parser-fn" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "doom-modeline-current-window" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "inhibit-compacting-font-caches" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "doom-modeline-github" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "lsp-clients-go-server" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "require") . 1) (emacs-lisp-mode . 1) (nil . 1)) "func" (((:file "/home/nieel/dev/go_study/main.go") . 1) ((:keyword "import") . 1) (go-mode . 1) (nil . 1)) "enable_language" (((:file "/home/nieel/dev/test/cppkg_test/cmake/cppm_tool.cmake") . 1) (cmake-mode . 1) (nil . 1)) "cd test/cppkg_test/nigthly_repo/" ((eshell-mode . 1) (nil . 1)) "CMAKE_CXX_COMPILER" (((:file "/home/nieel/dev/test/cppkg_test/thirdparty/FunctionalPlus/lastest/FunctionalPlus.cmake.in") . 1) (cmake-mode . 1) (nil . 1)) "cppm cppkg push FunctionalPlus/lastest/" ((eshell-mode . 1) (nil . 1)) "sudo rm -rf thirdparty/*" ((eshell-mode . 1) (nil . 1)) "using" (((:file "/home/nieel/dev/cppm/src/option/init.cpp") . 1) (c++-mode . 2) (nil . 2) ((:file "/home/nieel/dev/school/cpp/src/main.cpp") . 1)) "evil-want-keybinding" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "sudo chown -R nieel.nieel ~/.ccache/" ((eshell-mode . 2) (nil . 2)) "sudo chown -R nieel.nieel ~/.cppm" ((eshell-mode . 2) (nil . 2)) "CMakePushCheckState" (((:file "/home/nieel/dev/cppm/cmake/Modules/FindFilesystem.cmake") . 1) (cmake-mode . 1) (nil . 1)) "CheckIncludeFileCXX" (((:file "/home/nieel/dev/cppm/cmake/Modules/FindFilesystem.cmake") . 1) (cmake-mode . 1) (nil . 1)) "CheckCXXSourceCompiles" (((:file "/home/nieel/dev/cppm/cmake/Modules/FindFilesystem.cmake") . 1) (cmake-mode . 1) (nil . 1)) "generate" (((:file "/home/nieel/dev/cppm/.git/COMMIT_EDITMSG") . 1) (text-mode . 1) (nil . 2) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1) ((:keyword "auto") . 1) (c++-mode . 1)) "endfunction" (((:file "/home/nieel/dev/cppm/cmake/cppm_tool.cmake") . 1) ((:keyword "function") . 1) (cmake-mode . 1) (nil . 1)) "~/Dropbox/" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2) ((:keyword "setq") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "function") . 1)) "~/Dropbox/org/" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2) ((:keyword "setq") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "let") . 1)) "org-agenda-mode-hook" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "lambda" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 7) ((:keyword "setq") . 2) (emacs-lisp-mode . 7) (nil . 7) ((:keyword "lambda") . 2) ((:keyword "use-package") . 3)) "interactive" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 7) ((:keyword "defun") . 7) (emacs-lisp-mode . 7) (nil . 7)) "~/Dropbox/org/gcal.org" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "let") . 1) (emacs-lisp-mode . 1) (nil . 1)) "setq-local" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "if") . 1) (emacs-lisp-mode . 1) (nil . 1)) "set" (((:file "/home/nieel/.emacs.d/config.org") . 1) (org-mode . 1) (nil . 1)) "password-cache" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "password-cache-expiry" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "helm-system-packages" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "magithub-dashboard" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "config/dependency.h" (((:file "/home/nieel/dev/cppm/include/config/bin.h") . 1) (c++-mode . 1) (nil . 1)) "Dependencies" (((:file "/home/nieel/dev/cppm/include/config/bin.h") . 1) ((:keyword "struct") . 1) (c++-mode . 1) (nil . 1)) "empty" (((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 2) ((:symbol "deps") . 1) ((:keyword "if") . 2) (c++-mode . 2) (nil . 2) ((:symbol "pub_deps") . 1)) "list" (((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 3) ((:symbol "dependencies") . 3) ((:keyword "if") . 2) (c++-mode . 8) (nil . 8) ((:keyword "auto") . 4) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 5) ((:symbol "libs") . 2) ((:symbol "bins") . 3) ((:keyword "return") . 2)) "deps" (((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 2) ((:symbol "bin") . 2) ((:keyword "auto") . 1) (c++-mode . 2) (nil . 2) ((:keyword "auto&") . 1)) "emplace_back" (((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 1) ((:symbol "deps") . 1) ((:keyword "auto") . 1) (c++-mode . 1) (nil . 1)) "second" (((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 1) ((:symbol "g_dep") . 1) ((:keyword "auto") . 1) (c++-mode . 1) (nil . 1)) "first" (((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 2) ((:symbol "g_dep") . 2) ((:keyword "auto") . 1) (c++-mode . 2) (nil . 2) ((:keyword "auto&") . 1)) "push_back" (((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 2) ((:symbol "deps") . 1) ((:keyword "auto&") . 1) (c++-mode . 5) (nil . 5) ((:symbol "pub_deps") . 1) ((:keyword "if") . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 2) ((:symbol "list") . 2) ((:keyword "return") . 1) ((:keyword "auto") . 2) ((:file "/home/nieel/dev/algorithm/cpp/src/main.cpp") . 1) ((:symbol "nil") . 1)) "link_type" (((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 1) ((:symbol "nil") . 1) ((:keyword "if") . 1) (c++-mode . 1) (nil . 1)) "pub_deps" (((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 1) ((:keyword "if") . 1) (c++-mode . 1) (nil . 1)) "module" (((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 1) ((:symbol "g_dep") . 1) ((:keyword "if") . 1) (c++-mode . 1) (nil . 1)) "accumulate" (((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 1) ((:symbol "util") . 1) ((:keyword "return") . 1) (c++-mode . 1) (nil . 1)) "cppmopt" (((:file "/home/nieel/dev/cppm/include/config/cppm_tool.h") . 1) (c++-mode . 2) (nil . 2) ((:file "/home/nieel/dev/cppm/include/config/base_target.h") . 1)) "config/config.h" (((:file "/home/nieel/dev/cppm/include/config/cppm_tool.h") . 1) (c++-mode . 3) (nil . 3) ((:file "/home/nieel/dev/cppm/include/config/base_target.h") . 1) ((:symbol "nil") . 1) ((:file "/home/nieel/dev/cppm/src/config/base_target.cpp") . 1)) "config/cppm_tool.h" (((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1) (c++-mode . 2) (nil . 2) ((:file "/home/nieel/dev/cppm/src/config/config.cpp") . 1)) "libs" (((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 2) ((:symbol "config") . 2) ((:keyword "auto") . 2) (c++-mode . 2) (nil . 2)) "algorithm" (((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 2) (c++-mode . 3) (nil . 3) ((:file "/home/nieel/dev/school/cpp/src/main.cpp") . 1) ((:symbol "nil") . 1)) "insert" (((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1) ((:symbol "lists") . 1) ((:keyword "auto") . 1) (c++-mode . 1) (nil . 1)) "fmt/format.h" (((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1) (c++-mode . 1) (nil . 1)) "literals" (((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1) ((:symbol "fmt") . 1) ((:keyword "namespace") . 1) (c++-mode . 1) (nil . 1)) "util/algorithm.hpp" (((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1) (c++-mode . 1) (nil . 1)) "util/filesystem.h" (((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1) (c++-mode . 2) (nil . 2) ((:file "/home/nieel/dev/cppm/src/config/base_target.cpp") . 1)) "target_define" (((:file "/home/nieel/dev/cppm/src/config/config.cpp") . 3) ((:symbol "tool") . 3) ((:keyword "return") . 2) (c++-mode . 3) (nil . 3) ((:keyword "this") . 1)) "stack" (((:file "/home/nieel/dev/cppm/include/config/base_target.h") . 1) ((:symbol "nil") . 1) (c++-mode . 1) (nil . 1)) "streambuf" (((:file "/home/nieel/dev/cppm/include/config/base_target.h") . 1) ((:symbol "nil") . 1) (c++-mode . 1) (nil . 1)) "string" (((:file "/home/nieel/dev/cppm/include/config/base_target.h") . 1) ((:symbol "nil") . 1) (c++-mode . 2) (nil . 2) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1) ((:symbol "std") . 1) ((:keyword "return") . 1)) "config/base_target.h" (((:file "/home/nieel/dev/cppm/include/config/bin.h") . 1) (c++-mode . 3) (nil . 3) ((:file "/home/nieel/dev/cppm/src/config/base_target.cpp") . 1) ((:file "/home/nieel/dev/cppm/include/config/lib.h") . 1)) "filesystem" (((:file "/home/nieel/dev/cppm/src/config/base_target.cpp") . 1) (c++-mode . 1) (nil . 1)) "protected" (((:file "/home/nieel/dev/cppm/include/config/base_target.h") . 2) ((:keyword "struct") . 1) (c++-mode . 2) (nil . 2) ((:keyword "class") . 1)) "base_target" (((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 2) ((:symbol "lib") . 2) ((:keyword "auto") . 2) (c++-mode . 2) (nil . 2)) "get_sources" (((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 2) ((:symbol "base_target") . 1) ((:keyword "auto") . 2) (c++-mode . 2) (nil . 2) ((:symbol "lib") . 1)) "transform" (((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1) ((:symbol "std") . 1) ((:keyword "auto") . 1) (c++-mode . 1) (nil . 1)) "type" (((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1) ((:symbol "lib") . 1) ((:keyword "auto") . 1) (c++-mode . 1) (nil . 1)) "toupper" (((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1) ((:keyword "auto") . 1) (c++-mode . 1) (nil . 1)) "gen_sources" (((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 2) ((:keyword "if") . 1) (c++-mode . 2) (nil . 2) ((:keyword "else") . 1)) "vector" (((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1) ((:symbol "std") . 1) ((:keyword "return") . 1) (c++-mode . 1) (nil . 1)) "merge" (((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1) ((:symbol "std") . 1) ((:keyword "return") . 1) (c++-mode . 1) (nil . 1)) "begin" (((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 2) ((:symbol "list") . 2) ((:keyword "return") . 2) (c++-mode . 2) (nil . 2)) "back_inserter" (((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1) ((:symbol "std") . 1) ((:keyword "return") . 1) (c++-mode . 1) (nil . 1)) "install" (((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1) ((:symbol "target") . 1) ((:keyword "if") . 1) (c++-mode . 1) (nil . 1)) "target_dependencies" (((:file "/home/nieel/dev/cppm/src/config/config.cpp") . 1) ((:symbol "tool") . 1) ((:keyword "this") . 1) (c++-mode . 1) (nil . 1)) "target_install" (((:file "/home/nieel/dev/cppm/src/config/config.cpp") . 1) ((:symbol "tool") . 1) ((:keyword "this") . 1) (c++-mode . 1) (nil . 1)) "sudo chown -R nieel.nieel ../cmake/" ((eshell-mode . 1) (nil . 1)) "ExternalProject" (((:file "/home/nieel/dev/cppm/cmake/cppm_tool.cmake") . 3) ((:keyword "endif") . 3) (cmake-mode . 3) (nil . 3)) "cppm build --ntc" ((eshell-mode . 2) (nil . 2)) "rm -r ~/.cppm/tool/" ((eshell-mode . 14) (nil . 14)) "repository" (((:file "/home/nieel/dev/cppm/cmake/cppm_tool.cmake") . 1) ((:keyword "endif") . 1) (cmake-mode . 1) (nil . 1)) "cat ~/.cppm/install/cppm_tools/CMakeLists.txt" ((eshell-mode . 3) (nil . 3)) "ls ~/.cppm/install/cppm_tools/CMakeLists.txt" ((eshell-mode . 1) (nil . 1)) "ls ~/.cppm/install/cppm_tools/" ((eshell-mode . 1) (nil . 1)) "company-backends" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 3) ((:keyword "use-package") . 2) (emacs-lisp-mode . 3) (nil . 3) ((:keyword "setq") . 1)) "import" (((:file "/home/nieel/Downloads/example.py") . 1) ((:keyword "import") . 1) (python-mode . 1) (nil . 2) ((:file "/home/nieel/dev/go_study/main.go") . 1) (go-mode . 1)) "dummy_function" (((:file "/home/nieel/Downloads/example.py") . 1) ((:keyword "in") . 1) (python-mode . 1) (nil . 1)) "disabled" (((:file "/home/nieel/.emacs.d/config.org") . 3) ((:symbol "nil") . 3) (org-mode . 3) (nil . 3)) "sudo update-alternatives --install /usr/bin/ld ld /usr/bin/ld.gold 30" ((eshell-mode . 3) (nil . 3)) "sudo update-alternatives --install /usr/bin/ld ld /usr/bin/ld.bfd 40" ((eshell-mode . 1) (nil . 1)) "sudo update-alternatives --config ld" ((eshell-mode . 1) (nil . 1)) "sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-7 370" ((eshell-mode . 1) (nil . 1)) "rm -rf ~/.cppm/local/lib/cmake/fmt/" ((eshell-mode . 1) (nil . 1)) "sudo update-alternatives --config clang++" ((eshell-mode . 1) (nil . 1)) "rm -rf ~/.cppm/local/lib/cmake/nlpo/" ((eshell-mode . 1) (nil . 1)) "pcomplete-cycle-completions" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "eshell-cmpl-cycle-completions" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "setq-default" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "evil-mc-make-and-goto-first-cursor" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "evil-mc-make-cursor-here" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2) ((:keyword "use-package") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "interactive") . 1)) "evil-mc-make-cursor-move-prev-line" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "evil-mc-make-and-goto-last-cursor" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "evil-mc-make-all-cursors" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2) ((:keyword "use-package") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "defun") . 1)) "evil-mc-skip-and-goto-next-match" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "evil-mc-skip-and-goto-next-cursor" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "evil-mc-skip-and-goto-prev-match" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "evil-mc-skip-and-goto-prev-cursor" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "evil-mc-pause-cursors" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2) ((:keyword "use-package") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "interactive") . 1)) "evil-mc-make-cursor-move-next-line" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "evil-collection-evil-mc-setup" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "evil-leader/set-key-for-mode" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "evil-mc-resume-cursors" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "evil-mc-undo-all-cursors" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "/home/" (((:file "/home/nieel/.bashrc") . 1) ((:keyword "fi") . 1) (sh-mode . 1) (nil . 1)) "/home/nieel/" (((:file "/home/nieel/.bashrc") . 1) ((:keyword "fi") . 1) (sh-mode . 1) (nil . 1)) "/home/nieel/.local/" (((:file "/home/nieel/.bashrc") . 1) ((:keyword "fi") . 1) (sh-mode . 1) (nil . 1)) "/home/nieel/.local/bin/" (((:file "/home/nieel/.bashrc") . 1) ((:keyword "fi") . 1) (sh-mode . 1) (nil . 1)) "/home/nieel/.local/bin/virtualenv" (((:file "/home/nieel/.bashrc") . 1) ((:keyword "fi") . 1) (sh-mode . 1) (nil . 1)) "fish" (((:file "/home/nieel/.bashrc") . 1) ((:keyword "fi") . 1) (sh-mode . 1) (nil . 1)) "ifup" (((:file "/home/nieel/.profile") . 1) ((:keyword "fi") . 1) (sh-mode . 1) (nil . 1)) "cargo +nightly install racer" ((eshell-mode . 2) (nil . 2)) "async-shell-command" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 4) ((:keyword "interactive") . 4) (emacs-lisp-mode . 4) (nil . 4)) "call-process-shell-command" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "interactive-p" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "defun") . 1) (emacs-lisp-mode . 1) (nil . 1)) "async-shell-command-buffer" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2) ((:keyword "interactive") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "setq") . 1)) "eshell-command" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 3) ((:keyword "interactive") . 1) (emacs-lisp-mode . 3) (nil . 3) ((:keyword "lambda") . 2)) "text-scale-increase" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "text-scale-decrease" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "solution" (((:file "/home/nieel/dev/algorithm/cpp/src/main.cpp") . 1) ((:keyword "return") . 1) (c++-mode . 1) (nil . 1)) "iostream" (((:file "/home/nieel/dev/algorithm/cpp/src/main.cpp") . 1) (c++-mode . 1) (nil . 1)) "clm/open-command-log-buffer" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "lambda") . 1) (emacs-lisp-mode . 1) (nil . 1)) "smartparens-global-mode" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "sp-rewrap-sexp" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "sp-unwrap-sexp" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "sp-forward-slurp-sexp" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "sp-backward-slurp-sexp" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "sp-forward-barf-sexp" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "sp-backward-barf-sexp" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "display-graphic-p" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "if") . 1) (emacs-lisp-mode . 1) (nil . 1)) "cmake -H. -Bbuild" ((eshell-mode . 3) (nil . 3)) "cmake --build . --target lldb-vscode -- -j8" ((eshell-mode . 1) (nil . 1)) "fmakunbound" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "gdb-show-main" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "gdb-many-windows" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "org-babel-execute-maybe" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2) ((:keyword "interactive") . 2) (emacs-lisp-mode . 2) (nil . 2)) ":diminish" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "counsel-describe-variable-function" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) ":disabled" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2) ((:keyword "use-package") . 2) (emacs-lisp-mode . 2) (nil . 2)) "counsel-M-x" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "evil-collection-ivy-setup" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 3) ((:keyword "setq") . 2) (emacs-lisp-mode . 3) (nil . 3) ((:keyword "lambda") . 1)) "swiper-goto-start-of-match" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "swiper-stay-on-quit" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "ivy-count-format" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "ivy-display-style" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "ivy-initial-inputs-alist" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "ivy-format-function" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "ivy-format-function-line" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "ivy--regex-fuzzy" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "ivy--regex-plus" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "ivy-height" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "ivy-rich-set-display-transformer" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "ivy-rich-path-style" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "ivy-virtual-abbreviate" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "rtags-display-result-backend" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "ivy-use-selectable-prompt" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "enable-recursive-minibuffers" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "xref-show-xrefs-function" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "company-frontends" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "company-pseudo-tooltip-frontend" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "company-echo-metadata-frontend" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "counsel-tmm" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "historian-mode" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "ivy-historian-mode" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2) ((:keyword "use-package") . 2) (emacs-lisp-mode . 2) (nil . 2)) "use-package-compute-statistics" (((:file "/home/nieel/.emacs.d/init.el") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "historian" (((:file "/home/nieel/.emacs.d/config.org") . 1) (org-mode . 1) (nil . 1)) "smartparens" (((:file "/home/nieel/.emacs.d/config.org") . 1) (org-mode . 1) (nil . 1)) "google-translate-smooth-translate" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "prog-mode" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "rainbow-delimiters-mode-enable" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) (emacs-lisp-mode . 1) (nil . 1)) "evil-collection-ediff-help-changed" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "evil-collection-eshell-setup" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "lambda") . 1) (emacs-lisp-mode . 1) (nil . 1)) "evil-collection-mu4e-conversation-setup" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "lambda") . 1) (emacs-lisp-mode . 1) (nil . 1)) "counsel-projectile-transformer" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "evil-collection-calendar-setup" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "lambda") . 1) (emacs-lisp-mode . 1) (nil . 1)) "evil-collection-minibuffer-setup" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "lambda") . 1) (emacs-lisp-mode . 1) (nil . 1)) "gdb-executable" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq-default") . 1) (emacs-lisp-mode . 1) (nil . 1)) "indent-guide-mode" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "indent-guide-inhibit-modes" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "highlight-indent-guides" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "set-face-background" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "mv ~/Downloads/emacs_icon.png ." ((eshell-mode . 1) (nil . 1)) "dashboard-startup-banner" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "use-package-keywords" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 3) ((:keyword "use-package") . 2) (emacs-lisp-mode . 3) (nil . 3) ((:keyword "setq") . 1)) "use-package-deferring-keywords" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "evil-insert-state-map" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "company" (((:file "/home/nieel/.emacs.d/config.org") . 1) (org-mode . 1) (nil . 1)) "company-active-map" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "define-key" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "abbrev-all-caps" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2) ((:keyword "use-package") . 2) (emacs-lisp-mode . 2) (nil . 2)) "company-quickhelp-manual-begin" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "abbrev-expand-function" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "docker build -t cppm-test ." ((eshell-mode . 2) (nil . 2)) "evil-collection-pdf-setup" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "lambda") . 1) (emacs-lisp-mode . 1) (nil . 1)) "cppm init -b school" ((eshell-mode . 1) (nil . 1)) "namespace" (((:file "/home/nieel/dev/school/cpp/src/main.cpp") . 1) ((:keyword "using") . 1) (c++-mode . 1) (nil . 1)) "true" (((:file "/home/nieel/dev/school/cpp/src/main.cpp") . 1) ((:keyword "while") . 1) (c++-mode . 1) (nil . 1)) "array" (((:file "/home/nieel/dev/school/cpp/src/main.cpp") . 1) ((:symbol "std") . 1) (c++-mode . 1) (nil . 1)) "cppm build --release" ((eshell-mode . 1) (nil . 1)) "counsel--switch-buffer-temporary-buffers" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "counsel-switch-buffer" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2) ((:keyword "use-package") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "setq") . 1)) "build-essential" (((:file "/home/nieel/dev/alchemist/test_image/test_cpp/Dockerfile") . 1) ((:keyword "RUN") . 1) (dockerfile-mode . 1) (nil . 1)) "evil-collection-wgrep-setup" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "wgrep-setup" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "tabbar-init-hook" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "dap-ui-mode" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "require") . 1) (emacs-lisp-mode . 1) (nil . 1)) "~/.vscode/extensions/" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "dap-gdb-lldb-path" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "expand-file-name" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "dap-gdb-lldb-debug-program" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "shiplift" (((:file "/home/nieel/dev/alchemist/src/main.rs") . 4) ((:keyword "use") . 2) (rust-mode . 4) (nil . 4) ((:keyword "let") . 2)) "beaker" (((:file "/home/nieel/dev/alchemist/src/main.rs") . 1) ((:keyword "let") . 1) (rust-mode . 1) (nil . 1)) "newline" (((:file "/home/nieel/.emacs.d/config.org") . 1) (org-mode . 1) (nil . 1)) "doom-modeline-vspc" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "find-file-visit-truename" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "sudo cppm build -c install" ((eshell-mode . 1) (nil . 1)) "doom-modeline--flycheck-text" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "doom-modeline-major-mode-icon" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "doom-modeline-minor-modes" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "doom-modeline-major-mode-color-icon" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "fancy-battery-default-mode-line" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "doom-modeline-version" (((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "cppm cppkg push nlohmann_json/lastest/" ((eshell-mode . 1) (nil . 1)) "main" (((:file "/home/nieel/dev/go_study/main.go") . 1) ((:keyword "func") . 1) (go-mode . 1) (nil . 1)) "mkdir go_study" ((eshell-mode . 1) (nil . 1)))) company-statistics--log [("cd test/cppkg_test/nigthly_repo/" (nil . 1) (eshell-mode . 1)) ("CMAKE_CXX_COMPILER" (nil . 1) (cmake-mode . 1) ((:file "/home/nieel/dev/test/cppkg_test/thirdparty/FunctionalPlus/lastest/FunctionalPlus.cmake.in") . 1)) ("cppm cppkg push nlohmann_json/lastest/" (nil . 1) (eshell-mode . 1)) ("cppm cppkg push FunctionalPlus/lastest/" (nil . 1) (eshell-mode . 1)) ("cppm cppkg push nlohmann_json/lastest/" (nil . 1) (eshell-mode . 1)) ("cppm cppkg push nlohmann_json/lastest/" (nil . 1) (eshell-mode . 1)) ("sudo rm -rf thirdparty/*" (nil . 1) (eshell-mode . 1)) ("using" (nil . 1) (c++-mode . 1) ((:file "/home/nieel/dev/cppm/src/option/init.cpp") . 1)) ("evil-leader/set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-want-keybinding" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("sudo chown -R nieel.nieel ~/.ccache/" (nil . 1) (eshell-mode . 1)) ("sudo chown -R nieel.nieel ." (nil . 1) (eshell-mode . 1)) ("sudo chown -R nieel.nieel ." (nil . 1) (eshell-mode . 1)) ("sudo chown -R nieel.nieel ~/.cppm" (nil . 2) (eshell-mode . 2)) ("CMakePushCheckState" (nil . 1) (cmake-mode . 1) ((:file "/home/nieel/dev/cppm/cmake/Modules/FindFilesystem.cmake") . 1)) ("CheckIncludeFileCXX" (nil . 1) (cmake-mode . 1) ((:file "/home/nieel/dev/cppm/cmake/Modules/FindFilesystem.cmake") . 1)) ("CheckCXXSourceCompiles" (nil . 1) (cmake-mode . 1) ((:file "/home/nieel/dev/cppm/cmake/Modules/FindFilesystem.cmake") . 1)) ("sudo chown -R nieel.nieel ~/.cppm" (nil . 1) (eshell-mode . 1)) ("sudo chown -R nieel.nieel ." (nil . 1) (eshell-mode . 1)) ("generate" (nil . 1) (text-mode . 1) ((:file "/home/nieel/dev/cppm/.git/COMMIT_EDITMSG") . 1)) ("endfunction" (nil . 1) (cmake-mode . 1) ((:keyword "function") . 1) ((:file "/home/nieel/dev/cppm/cmake/cppm_tool.cmake") . 1)) ("~/Dropbox/" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2)) ("~/Dropbox/org/" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("org-agenda-mode-hook" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("lambda" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2)) ("lambda" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("~/Dropbox/" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "function") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("interactive" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("~/Dropbox/org/" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "let") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("~/Dropbox/org/gcal.org" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "let") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("setq-local" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("package" (nil . 1) (org-mode . 1) ((:file "/home/nieel/.emacs.d/config.org") . 1)) ("set" (nil . 1) (org-mode . 1) ((:file "/home/nieel/.emacs.d/config.org") . 1)) ("password-cache" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("password-cache-expiry" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-leader/set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("helm-system-packages" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-leader/set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("magithub-dashboard" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("config/dependency.h" (nil . 1) (c++-mode . 1) ((:file "/home/nieel/dev/cppm/include/config/bin.h") . 1)) ("Dependencies" (nil . 1) (c++-mode . 1) ((:keyword "struct") . 1) ((:file "/home/nieel/dev/cppm/include/config/bin.h") . 1)) ("dependencies" (nil . 1) (toml-mode . 2) ((:file "/home/nieel/dev/cppm/cppm.toml") . 2)) ("dependencies" (nil . 1) (toml-mode . 1) ((:file "/home/nieel/dev/cppm/cppm.toml") . 1)) ("dependencies" (nil . 1) (c++-mode . 7) ((:keyword "auto") . 1) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 7)) ("empty" (nil . 2) (c++-mode . 2) ((:keyword "if") . 2) ((:symbol "deps") . 1) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 2)) ("dependencies" (nil . 1) (c++-mode . 1) ((:keyword "if") . 5) ((:symbol "config") . 4) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 1)) ("list" (nil . 3) (c++-mode . 3) ((:keyword "if") . 2) ((:symbol "dependencies") . 3) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 3)) ("dependencies" (nil . 1) (c++-mode . 1) ((:keyword "if") . 1) ((:symbol "config") . 1) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 1)) ("dependencies" (nil . 1) (c++-mode . 1) ((:keyword "for") . 1) ((:symbol "config") . 1) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 1)) ("list" (nil . 1) (c++-mode . 1) ((:keyword "auto") . 1) ((:symbol "dependencies") . 1) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 1)) ("deps" (nil . 2) (c++-mode . 2) ((:keyword "auto") . 1) ((:symbol "bin") . 2) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 2)) ("emplace_back" (nil . 1) (c++-mode . 1) ((:keyword "auto") . 1) ((:symbol "deps") . 1) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 1)) ("second" (nil . 1) (c++-mode . 1) ((:keyword "auto") . 1) ((:symbol "g_dep") . 1) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 1)) ("first" (nil . 2) (c++-mode . 2) ((:keyword "auto") . 1) ((:symbol "g_dep") . 2) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 2)) ("deps" (nil . 1) (c++-mode . 1) ((:keyword "auto&") . 1) ((:symbol "bin") . 1) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 1)) ("push_back" (nil . 2) (c++-mode . 2) ((:keyword "auto&") . 1) ((:symbol "deps") . 1) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 2)) ("first" (nil . 1) (c++-mode . 1) ((:keyword "auto&") . 1) ((:symbol "g_dep") . 1) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 1)) ("dependencies" (nil . 1) (c++-mode . 1) ((:keyword "if") . 1) ((:symbol "config") . 1) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 1)) ("list" (nil . 1) (c++-mode . 1) ((:keyword "if") . 1) ((:symbol "dependencies") . 1) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 1)) ("link_type" (nil . 1) (c++-mode . 1) ((:keyword "if") . 1) ((:symbol "nil") . 1) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 1)) ("pub_deps" (nil . 1) (c++-mode . 1) ((:keyword "if") . 1) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 1)) ("push_back" (nil . 1) (c++-mode . 1) ((:keyword "if") . 1) ((:symbol "pub_deps") . 1) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 1)) ("module" (nil . 1) (c++-mode . 1) ((:keyword "if") . 1) ((:symbol "g_dep") . 1) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 1)) ("dependencies" (nil . 1) (c++-mode . 1) ((:keyword "if") . 1) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 1)) ("accumulate" (nil . 1) (c++-mode . 1) ((:keyword "return") . 1) ((:symbol "util") . 1) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 1)) ("empty" (nil . 1) (c++-mode . 1) ((:keyword "if") . 1) ((:symbol "pub_deps") . 1) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 1)) ("dependencies" (nil . 1) (c++-mode . 1) ((:keyword "if") . 1) ((:file "/home/nieel/dev/cppm/src/config/bin.cpp") . 1)) ("cppmopt" (nil . 2) (c++-mode . 2) ((:file "/home/nieel/dev/cppm/include/config/cppm_tool.h") . 1)) ("config/config.h" (nil . 3) (c++-mode . 3) ((:file "/home/nieel/dev/cppm/include/config/cppm_tool.h") . 1)) ("config/cppm_tool.h" (nil . 2) (c++-mode . 2) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("libs" (nil . 2) (c++-mode . 2) ((:keyword "auto") . 2) ((:symbol "config") . 2) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 2)) ("list" (nil . 1) (c++-mode . 1) ((:keyword "auto") . 1) ((:symbol "libs") . 2) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 3)) ("list" (nil . 1) (c++-mode . 1) ((:keyword "auto") . 1) ((:symbol "bins") . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("algorithm" (nil . 2) (c++-mode . 2) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 2)) ("insert" (nil . 1) (c++-mode . 1) ((:keyword "auto") . 1) ((:symbol "lists") . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("fmt/format.h" (nil . 1) (c++-mode . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("literals" (nil . 1) (c++-mode . 1) ((:keyword "namespace") . 1) ((:symbol "fmt") . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("util/algorithm.hpp" (nil . 1) (c++-mode . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("generate" (nil . 1) (c++-mode . 1) ((:keyword "auto") . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("libs" (nil . 1) (c++-mode . 1) ((:keyword "auto") . 1) ((:symbol "config") . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("list" (nil . 1) (c++-mode . 1) ((:keyword "auto") . 1) ((:symbol "libs") . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("util/filesystem.h" (nil . 2) (c++-mode . 2) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("config/cppm_tool.h" (nil . 1) (c++-mode . 1) ((:file "/home/nieel/dev/cppm/src/config/config.cpp") . 1)) ("target_define" (nil . 1) (c++-mode . 1) ((:keyword "return") . 1) ((:symbol "tool") . 1) ((:file "/home/nieel/dev/cppm/src/config/config.cpp") . 1)) ("cppmopt" (nil . 1) (c++-mode . 1) ((:file "/home/nieel/dev/cppm/include/config/base_target.h") . 1)) ("stack" (nil . 1) (c++-mode . 1) ((:symbol "nil") . 1) ((:file "/home/nieel/dev/cppm/include/config/base_target.h") . 1)) ("streambuf" (nil . 1) (c++-mode . 1) ((:symbol "nil") . 1) ((:file "/home/nieel/dev/cppm/include/config/base_target.h") . 1)) ("string" (nil . 1) (c++-mode . 1) ((:symbol "nil") . 1) ((:file "/home/nieel/dev/cppm/include/config/base_target.h") . 1)) ("config/config.h" (nil . 1) (c++-mode . 1) ((:symbol "nil") . 1) ((:file "/home/nieel/dev/cppm/include/config/base_target.h") . 1)) ("config/base_target.h" (nil . 3) (c++-mode . 3) ((:file "/home/nieel/dev/cppm/include/config/bin.h") . 1)) ("config/base_target.h" (nil . 1) (c++-mode . 1) ((:file "/home/nieel/dev/cppm/src/config/base_target.cpp") . 1)) ("filesystem" (nil . 1) (c++-mode . 1) ((:file "/home/nieel/dev/cppm/src/config/base_target.cpp") . 1)) ("util/filesystem.h" (nil . 1) (c++-mode . 1) ((:file "/home/nieel/dev/cppm/src/config/base_target.cpp") . 1)) ("config/config.h" (nil . 1) (c++-mode . 1) ((:file "/home/nieel/dev/cppm/src/config/base_target.cpp") . 1)) ("config/base_target.h" (nil . 1) (c++-mode . 1) ((:file "/home/nieel/dev/cppm/include/config/lib.h") . 1)) ("protected" (nil . 2) (c++-mode . 2) ((:keyword "struct") . 1) ((:file "/home/nieel/dev/cppm/include/config/base_target.h") . 2)) ("base_target" (nil . 2) (c++-mode . 2) ((:keyword "auto") . 2) ((:symbol "lib") . 2) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 2)) ("base_target" (nil . 1) (c++-mode . 1) ((:keyword "auto") . 1) ((:symbol "lib") . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("get_sources" (nil . 2) (c++-mode . 2) ((:keyword "auto") . 2) ((:symbol "base_target") . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 2)) ("protected" (nil . 1) (c++-mode . 1) ((:keyword "class") . 1) ((:file "/home/nieel/dev/cppm/include/config/base_target.h") . 1)) ("get_sources" (nil . 1) (c++-mode . 1) ((:keyword "auto") . 1) ((:symbol "lib") . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("transform" (nil . 1) (c++-mode . 1) ((:keyword "auto") . 1) ((:symbol "std") . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("type" (nil . 1) (c++-mode . 1) ((:keyword "auto") . 1) ((:symbol "lib") . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("algorithm" (nil . 1) (c++-mode . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("toupper" (nil . 1) (c++-mode . 1) ((:keyword "auto") . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("gen_sources" (nil . 2) (c++-mode . 2) ((:keyword "if") . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 2)) ("gen_sources" (nil . 1) (c++-mode . 1) ((:keyword "else") . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("vector" (nil . 1) (c++-mode . 1) ((:keyword "return") . 1) ((:symbol "std") . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("string" (nil . 1) (c++-mode . 1) ((:keyword "return") . 1) ((:symbol "std") . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("merge" (nil . 1) (c++-mode . 1) ((:keyword "return") . 1) ((:symbol "std") . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("list" (nil . 1) (c++-mode . 1) ((:keyword "return") . 2) ((:symbol "bins") . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("begin" (nil . 2) (c++-mode . 2) ((:keyword "return") . 2) ((:symbol "list") . 2) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 2)) ("back_inserter" (nil . 1) (c++-mode . 1) ((:keyword "return") . 1) ((:symbol "std") . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("install" (nil . 1) (c++-mode . 1) ((:keyword "if") . 1) ((:symbol "target") . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("push_back" (nil . 1) (c++-mode . 1) ((:keyword "return") . 1) ((:symbol "list") . 2) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 2)) ("list" (nil . 1) (c++-mode . 1) ((:keyword "return") . 1) ((:symbol "bins") . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("begin" (nil . 1) (c++-mode . 1) ((:keyword "return") . 1) ((:symbol "list") . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("push_back" (nil . 1) (c++-mode . 1) ((:keyword "auto") . 1) ((:symbol "list") . 1) ((:file "/home/nieel/dev/cppm/src/config/cppm_tool.cpp") . 1)) ("target_define" (nil . 1) (c++-mode . 1) ((:keyword "this") . 1) ((:symbol "tool") . 1) ((:file "/home/nieel/dev/cppm/src/config/config.cpp") . 1)) ("target_define" (nil . 1) (c++-mode . 1) ((:keyword "return") . 1) ((:symbol "tool") . 1) ((:file "/home/nieel/dev/cppm/src/config/config.cpp") . 1)) ("target_dependencies" (nil . 1) (c++-mode . 1) ((:keyword "this") . 1) ((:symbol "tool") . 1) ((:file "/home/nieel/dev/cppm/src/config/config.cpp") . 1)) ("target_install" (nil . 1) (c++-mode . 1) ((:keyword "this") . 1) ((:symbol "tool") . 1) ((:file "/home/nieel/dev/cppm/src/config/config.cpp") . 1)) ("sudo chown -R nieel.nieel ~/.cppm/" (nil . 1) (eshell-mode . 1)) ("sudo chown -R nieel.nieel ../cmake/" (nil . 1) (eshell-mode . 1)) ("dependencies" (nil . 1) (text-mode . 1) ((:file "/home/nieel/dev/cppm/.git/COMMIT_EDITMSG") . 1)) ("ExternalProject" (nil . 3) (cmake-mode . 3) ((:keyword "endif") . 3) ((:file "/home/nieel/dev/cppm/cmake/cppm_tool.cmake") . 3)) ("ExternalProject" (nil . 1) (cmake-mode . 1) ((:keyword "endif") . 1) ((:file "/home/nieel/dev/cppm/cmake/cppm_tool.cmake") . 1)) ("cppm build --ntc" (nil . 2) (eshell-mode . 2)) ("rm -r ~/.cppm/tool/" (nil . 14) (eshell-mode . 14)) ("rm -r ~/.cppm/tool/" (nil . 1) (eshell-mode . 1)) ("ExternalProject" (nil . 1) (cmake-mode . 1) ((:keyword "endif") . 1) ((:file "/home/nieel/dev/cppm/cmake/cppm_tool.cmake") . 1)) ("repository" (nil . 1) (cmake-mode . 1) ((:keyword "endif") . 1) ((:file "/home/nieel/dev/cppm/cmake/cppm_tool.cmake") . 1)) ("rm -r ~/.cppm/tool/" (nil . 1) (eshell-mode . 1)) ("rm -r ~/.cppm/tool/" (nil . 1) (eshell-mode . 1)) ("rm -r ~/.cppm/tool/" (nil . 1) (eshell-mode . 1)) ("rm -r ~/.cppm/tool/" (nil . 1) (eshell-mode . 1)) ("cat ~/.cppm/install/cppm_tools/CMakeLists.txt" (nil . 3) (eshell-mode . 3)) ("rm -r ~/.cppm/tool/" (nil . 1) (eshell-mode . 1)) ("cat ~/.cppm/install/cppm_tools/CMakeLists.txt" (nil . 1) (eshell-mode . 1)) ("ls ~/.cppm/install/cppm_tools/CMakeLists.txt" (nil . 1) (eshell-mode . 1)) ("ls ~/.cppm/install/cppm_tools/" (nil . 1) (eshell-mode . 1)) ("cat ~/.cppm/install/cppm_tools/CMakeLists.txt" (nil . 1) (eshell-mode . 1)) ("cppm build --ntc" (nil . 1) (eshell-mode . 1)) ("rm -r ~/.cppm/tool/" (nil . 1) (eshell-mode . 1)) ("rm -r ~/.cppm/tool/" (nil . 1) (eshell-mode . 1)) ("rm -r ~/.cppm/tool/" (nil . 1) (eshell-mode . 1)) ("rm -r ~/.cppm/tool/" (nil . 1) (eshell-mode . 1)) ("rm -r ~/.cppm/tool/" (nil . 1) (eshell-mode . 1)) ("rm -r ~/.cppm/tool/" (nil . 1) (eshell-mode . 1)) ("rm -r ~/.cppm/tool/" (nil . 1) (eshell-mode . 1)) ("window-system" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("window-system" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("add-to-list" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("company-backends" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("import" (nil . 1) (python-mode . 1) ((:keyword "import") . 1) ((:file "/home/nieel/Downloads/example.py") . 1)) ("dummy_function" (nil . 1) (python-mode . 1) ((:keyword "in") . 1) ((:file "/home/nieel/Downloads/example.py") . 1)) ("disabled" (nil . 1) (org-mode . 1) ((:symbol "nil") . 1) ((:file "/home/nieel/.emacs.d/config.org") . 1)) ("sudo chown -R nieel.nieel ~/.ccache/" (nil . 1) (eshell-mode . 1)) ("sudo chown -R nieel.nieel ~/.hunter/" (nil . 1) (eshell-mode . 1)) ("sudo update-alternatives --install /usr/bin/ld ld /usr/bin/ld.gold 30" (nil . 3) (eshell-mode . 3)) ("sudo update-alternatives --install /usr/bin/ld ld /usr/bin/ld.gold 30" (nil . 1) (eshell-mode . 1)) ("sudo update-alternatives --install /usr/bin/ld ld /usr/bin/ld.gold 30" (nil . 1) (eshell-mode . 1)) ("sudo update-alternatives --install /usr/bin/ld ld /usr/bin/ld.bfd 40" (nil . 1) (eshell-mode . 1)) ("sudo update-alternatives --config ld" (nil . 1) (eshell-mode . 1)) ("sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-7 370" (nil . 1) (eshell-mode . 1)) ("sudo chown -R nieel.nieel ~/.hunter/" (nil . 1) (eshell-mode . 1)) ("rm -rf ~/.cppm/local/lib/cmake/fmt/" (nil . 1) (eshell-mode . 1)) ("sudo update-alternatives --config clang++" (nil . 1) (eshell-mode . 1)) ("rm -rf ~/.cppm/local/lib/cmake/nlpo/" (nil . 1) (eshell-mode . 1)) ("package" (nil . 1) (org-mode . 1) ((:file "/home/nieel/.emacs.d/config.org") . 1)) ("lambda" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("pcomplete-cycle-completions" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("eshell-cmpl-cycle-completions" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("setq-default" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-leader/set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-mc-make-and-goto-first-cursor" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-mc-make-cursor-here" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-mc-make-cursor-move-prev-line" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-mc-make-and-goto-last-cursor" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-mc-make-all-cursors" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-mc-skip-and-goto-next-match" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-mc-skip-and-goto-next-cursor" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-mc-skip-and-goto-prev-match" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-mc-skip-and-goto-prev-cursor" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-mc-pause-cursors" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-mc-make-cursor-move-next-line" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-collection-evil-mc-setup" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-leader/set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-leader/set-key-for-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-leader/set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("interactive" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-mc-pause-cursors" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-mc-make-cursor-here" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-mc-resume-cursors" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-mc-undo-all-cursors" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("/home/" (nil . 1) (sh-mode . 1) ((:keyword "fi") . 1) ((:file "/home/nieel/.bashrc") . 1)) ("/home/nieel/" (nil . 1) (sh-mode . 1) ((:keyword "fi") . 1) ((:file "/home/nieel/.bashrc") . 1)) ("/home/nieel/.local/" (nil . 1) (sh-mode . 1) ((:keyword "fi") . 1) ((:file "/home/nieel/.bashrc") . 1)) ("/home/nieel/.local/bin/" (nil . 1) (sh-mode . 1) ((:keyword "fi") . 1) ((:file "/home/nieel/.bashrc") . 1)) ("/home/nieel/.local/bin/virtualenv" (nil . 1) (sh-mode . 1) ((:keyword "fi") . 1) ((:file "/home/nieel/.bashrc") . 1)) ("add-to-list" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("company-backends" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("fish" (nil . 1) (sh-mode . 1) ((:keyword "fi") . 1) ((:file "/home/nieel/.bashrc") . 1)) ("ifup" (nil . 1) (sh-mode . 1) ((:keyword "fi") . 1) ((:file "/home/nieel/.profile") . 1)) ("cargo +nightly install racer" (nil . 2) (eshell-mode . 2)) ("cargo +nightly install racer" (nil . 1) (eshell-mode . 1)) ("interactive" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("interactive" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("async-shell-command" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("async-shell-command" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("interactive" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("call-process-shell-command" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("interactive-p" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("interactive" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("async-shell-command-buffer" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("async-shell-command" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("async-shell-command" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("eshell-command" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-leader/set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("text-scale-increase" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("text-scale-decrease" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("solution" (nil . 1) (c++-mode . 1) ((:keyword "return") . 1) ((:file "/home/nieel/dev/algorithm/cpp/src/main.cpp") . 1)) ("iostream" (nil . 1) (c++-mode . 1) ((:file "/home/nieel/dev/algorithm/cpp/src/main.cpp") . 1)) ("push_back" (nil . 1) (c++-mode . 1) ((:keyword "auto") . 1) ((:symbol "nil") . 1) ((:file "/home/nieel/dev/algorithm/cpp/src/main.cpp") . 1)) ("evil-leader/set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("lambda" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("clm/open-command-log-buffer" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("smartparens-global-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-leader/set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("sp-rewrap-sexp" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("sp-unwrap-sexp" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("sp-forward-slurp-sexp" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("sp-backward-slurp-sexp" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("sp-forward-barf-sexp" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("sp-backward-barf-sexp" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("display-graphic-p" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("cmake -H. -Bbuild" (nil . 3) (eshell-mode . 3)) ("cmake -H. -Bbuild" (nil . 1) (eshell-mode . 1)) ("cmake -H. -Bbuild" (nil . 1) (eshell-mode . 1)) ("cmake --build . --target lldb-vscode -- -j8" (nil . 1) (eshell-mode . 1)) ("fmakunbound" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("gdb-show-main" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("gdb-many-windows" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("interactive" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("org-babel-execute-maybe" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "interactive") . 2) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2)) ("org-babel-execute-maybe" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-leader/set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) (":diminish" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("use-package" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("counsel-describe-variable-function" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) (":disabled" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("counsel-M-x" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) (":disabled" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-collection-ivy-setup" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("swiper-goto-start-of-match" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("swiper-stay-on-quit" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("ivy-count-format" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("ivy-display-style" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("ivy-initial-inputs-alist" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("ivy-format-function" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("ivy-format-function-line" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("ivy--regex-fuzzy" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("ivy--regex-plus" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("ivy-height" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("ivy-rich-set-display-transformer" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("ivy-rich-path-style" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("ivy-virtual-abbreviate" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("rtags-display-result-backend" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("ivy-use-selectable-prompt" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("enable-recursive-minibuffers" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("xref-show-xrefs-function" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("company-frontends" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("company-pseudo-tooltip-frontend" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("company-echo-metadata-frontend" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("counsel-tmm" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("historian-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("ivy-historian-mode" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "use-package") . 2) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2)) ("ivy-historian-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-leader/set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("use-package-compute-statistics" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/init.el") . 1)) ("historian" (nil . 1) (org-mode . 1) ((:file "/home/nieel/.emacs.d/config.org") . 1)) ("smartparens" (nil . 1) (org-mode . 1) ((:file "/home/nieel/.emacs.d/config.org") . 1)) ("google-translate-smooth-translate" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("prog-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("rainbow-delimiters-mode-enable" (nil . 1) (emacs-lisp-mode . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-collection-ivy-setup" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-collection-ediff-help-changed" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-collection-ivy-setup" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-collection-eshell-setup" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-collection-mu4e-conversation-setup" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-leader/set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("counsel-projectile-transformer" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-collection-calendar-setup" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-collection-minibuffer-setup" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-leader/set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq-default") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("gdb-executable" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq-default") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("indent-guide-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("indent-guide-inhibit-modes" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("disabled" (nil . 1) (org-mode . 1) ((:symbol "nil") . 1) ((:file "/home/nieel/.emacs.d/config.org") . 1)) ("highlight-indent-guides" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("set-face-background" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("mv ~/Downloads/emacs_icon.png ." (nil . 1) (eshell-mode . 1)) ("dashboard-startup-banner" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("use-package" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("use-package-keywords" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "use-package") . 2) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2)) ("use-package-keywords" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("use-package" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("use-package-keywords" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("url-package-name" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("use-package" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("use-package-deferring-keywords" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("use-package" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("url-package-name" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 2) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("url-package-name" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("upkg" (nil . 6) (emacs-lisp-mode . 6) ((:keyword "setq") . 6) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 6)) ("upkg" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("upkg" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("upkg" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("upkg" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("upkg" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("upkg" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("use-package" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("upkg" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("add-to-list" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("company-backends" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("evil-insert-state-map" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("use-package" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("async-shell-command-buffer" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("company" (nil . 1) (org-mode . 1) ((:file "/home/nieel/.emacs.d/config.org") . 1)) ("define-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("company-active-map" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("company-quickhelp-manual-begin" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("abbrev-all-caps" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "use-package") . 2) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2)) ("abbrev-all-caps" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("abbrev-expand-function" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("upkg" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("upkg" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("docker build -t cppm-test ." (nil . 1) (eshell-mode . 1)) ("evil-collection-pdf-setup" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("cppm init -b school" (nil . 1) (eshell-mode . 1)) ("namespace" (nil . 1) (c++-mode . 1) ((:keyword "using") . 1) ((:file "/home/nieel/dev/school/cpp/src/main.cpp") . 1)) ("evil-leader/set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("lambda" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("eshell-command" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 2) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("lambda" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("eshell-command" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("width" (nil . 1) (c++-mode . 1) ((:file "/home/nieel/dev/school/cpp/src/main.cpp") . 1)) ("height" (nil . 1) (c++-mode . 1) ((:file "/home/nieel/dev/school/cpp/src/main.cpp") . 1)) ("using" (nil . 1) (c++-mode . 1) ((:file "/home/nieel/dev/school/cpp/src/main.cpp") . 1)) ("true" (nil . 1) (c++-mode . 1) ((:keyword "while") . 1) ((:file "/home/nieel/dev/school/cpp/src/main.cpp") . 1)) ("array" (nil . 1) (c++-mode . 1) ((:symbol "std") . 1) ((:file "/home/nieel/dev/school/cpp/src/main.cpp") . 1)) ("algorithm" (nil . 1) (c++-mode . 1) ((:symbol "nil") . 1) ((:file "/home/nieel/dev/school/cpp/src/main.cpp") . 1)) ("greater" (nil . 1) (c++-mode . 1) ((:keyword "auto") . 1) ((:symbol "std") . 1) ((:file "/home/nieel/dev/school/cpp/src/main.cpp") . 1)) ("cppm build --release" (nil . 1) (eshell-mode . 1)) ("counsel--switch-buffer-temporary-buffers" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("counsel-switch-buffer" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 2)) ("evil-leader/set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("counsel-switch-buffer" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("docker build -t cppm-test ." (nil . 1) (eshell-mode . 1)) ("build-essential" (nil . 1) (dockerfile-mode . 1) ((:keyword "RUN") . 1) ((:file "/home/nieel/dev/alchemist/test_image/test_cpp/Dockerfile") . 1)) ("evil-mc-make-all-cursors" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("disabled" (nil . 1) (org-mode . 1) ((:symbol "nil") . 1) ((:file "/home/nieel/.emacs.d/config.org") . 1)) ("evil-collection-wgrep-setup" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("wgrep-setup" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("tabbar-init-hook" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("dap-ui-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "require") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("dap-gdb-lldb-path" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("~/.vscode/extensions/" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("~/.vscode/extensions/webfreak.debug-0.22.0/" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("expand-file-name" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("dap-gdb-lldb-debug-program" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("~/.vscode/extensions/webfreak.debug-0.22.0/out/" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("~/.vscode/extensions/webfreak.debug-0.22.0/out/src/" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("~/.vscode/extensions/webfreak.debug-0.22.0/out/src/gdb.js" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("shiplift" (nil . 4) (rust-mode . 4) ((:keyword "use") . 2) ((:file "/home/nieel/dev/alchemist/src/main.rs") . 4)) ("shiplift" (nil . 1) (rust-mode . 1) ((:keyword "use") . 1) ((:file "/home/nieel/dev/alchemist/src/main.rs") . 1)) ("shiplift" (nil . 1) (rust-mode . 1) ((:keyword "let") . 2) ((:file "/home/nieel/dev/alchemist/src/main.rs") . 1)) ("Docker" (nil . 2) (rust-mode . 2) ((:keyword "let") . 2) ((:symbol "shiplift") . 2) ((:file "/home/nieel/dev/alchemist/src/main.rs") . 2)) ("shiplift" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:file "/home/nieel/dev/alchemist/src/main.rs") . 1)) ("Docker" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:symbol "shiplift") . 1) ((:file "/home/nieel/dev/alchemist/src/main.rs") . 1)) ("beaker" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:file "/home/nieel/dev/alchemist/src/main.rs") . 1)) ("lambda" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("doom-modeline-vspc" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("doom-modeline-env-ruby-parser-fn" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("doom-modeline-current-window" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("find-file-visit-truename" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("inhibit-compacting-font-caches" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("doom-modeline--flycheck-text" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("doom-modeline-github" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("doom-modeline-major-mode-icon" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("doom-modeline-major-mode-color-icon" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("doom-modeline-minor-modes" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("fancy-battery-default-mode-line" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("doom-modeline-version" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("lsp-clients-go-server" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "require") . 1) ((:file "/home/nieel/.emacs.d/config.org[*Org Src config.org[ emacs-lisp ]*]") . 1)) ("import" (nil . 1) (go-mode . 1) ((:file "/home/nieel/dev/go_study/main.go") . 1)) ("package" (nil . 1) (go-mode . 1) ((:file "/home/nieel/dev/go_study/main.go") . 1)) ("func" (nil . 1) (go-mode . 1) ((:keyword "import") . 1) ((:file "/home/nieel/dev/go_study/main.go") . 1)) ("main" (nil . 1) (go-mode . 1) ((:keyword "func") . 1) ((:file "/home/nieel/dev/go_study/main.go") . 1)) ("mkdir go_study" (nil . 1) (eshell-mode . 1))] company-statistics--index 0)